---
title: {{ country.Display }}
toc: false
theme: air
---

<!-- Initialise govuk-frontend -->
```js
import { initAll } from 'npm:govuk-frontend@5.8.0/dist/govuk/govuk-frontend.min.js'
initAll();
````

<!-- Constants -->
```js
const govuk_colour_palette = ["#F46A25", "#28A197", "#12436D", "#801650", "#3D3D3D", "#A285D1"];
```

<!-- Data -->
```js
const tradeTotals = await FileAttachment("../data/uk-total-trade-all-countries-seasonally-adjusted.csv").csv({typed: true});
const partnerTotals = await tradeTotals.filter(row => row['Year'] >= 2014 && row['ISO2'] === '{{ country.ISO2 }}' && (row['flow'] == 'total_import' || row['flow'] == 'total_export'));

const dataByYearAndFlow = d3.group(partnerTotals, d => d.Year, d => d.flow);
const max = Array.from(dataByYearAndFlow.values()).reduce((partial, row) => Math.max(
  partial,
  Math.abs(row.get('total_import')[0]['Million']),
  Math.abs(row.get('total_export')[0]['Million']),
  Math.abs(row.get('total_export')[0]['Million'] + row.get('total_import')[0]['Million']),
  Math.abs(row.get('total_export')[0]['Million'] - row.get('total_import')[0]['Million']),
), 0);
const [scaleName, scaleFactor] = (max >= 1000.0) ? ['Billion', 1000.0] : ['Million', 1.0];
```

<!-- Input widgets -->
```js
// None at the moment
```

<!-- Charts -->
```js
function tradeValue(data, scaleName, scaleFactor) {
  return Plot.plot({
    subtitle: "",
    style: "font-size: 16px;",
    marginLeft: 40,
    marginBottom: 40,
    marginTop: 30,
    x: {label: null, tickRotate: -45, type: "band"},
    y: {label: "£ " + scaleName, grid: true, nice: true},
    color: {
      range: govuk_colour_palette,
    },
    marks: [
      Plot.gridY(),
      Plot.ruleY([0], {stroke: "#b1b4b6", strokeWidth: 4}),
      Plot.line(data, {
        y: d => d['Million'] / scaleFactor,
        x: d => '' + d['Year'],
        z: d => d['flow'],
        stroke: d => d["flow"],
        strokeWidth: 5,
      }),
      Plot.line(data, Plot.groupX({
        y: "sum",
      }, {
        y: d => d['Million'] / scaleFactor,
        x: d => '' + d['Year'],
        stroke: 2,
        strokeWidth: 6,
      })),
    ]
  })
};

function tradeBalance(data, scaleName, scaleFactor) {
  return Plot.plot({
    subtitle: "",
    style: "font-size: 16px;",
    marginLeft: 40,
    marginBottom: 40,
    marginTop: 30,
    x: {label: null, tickRotate: -45, type: "band"},
    y: {label: "£ " + scaleName, grid: true, nice: true},
    marks: [ 
      Plot.gridY(),
      Plot.ruleY([0], {stroke: "#b1b4b6", strokeWidth: 4}),
      Plot.barY(data, Plot.groupX({
        y: "sum",
      }, {
        x: d => '' + d['Year'],
        y: d => d['Million'] * (d['flow'] == 'total_import' ? -1 : 1) / scaleFactor,
        fill: govuk_colour_palette[2],
      })),
      Plot.ruleY([0], {stroke: "currentColor"}),
    ]
  })
};

function table(data, scaleName, scaleFactor) {
  const dataByYearAndFlow = d3.group(data, d => d.Year, d => d.flow);
  return htl.html`<table class="govuk-table">
    <caption class="govuk-table__caption govuk-table__caption--m">UK trade with {{ country.Display }}</caption>
    <thead class="govuk-table__head">
      <tr class="govuk-table__row">
        <th scope="col" class="govuk-table__header">Value in £ ${scaleName}</th>
        ${Array.from(dataByYearAndFlow.keys()).map((year) =>
          htl.html`<th scope="col" class="govuk-table__header govuk-table__header--numeric">${year}</th>`
        )}
      </tr>
    </thead>
    <tbody class="govuk-table__body">
      <tr class="govuk-table__row">
        <th scope="row" class="govuk-table__header">Total trade</th>
        ${Array.from(dataByYearAndFlow.entries()).map((entry) =>
          htl.html`<td class="govuk-table__cell govuk-table__cell--numeric">${((entry[1].get('total_export')[0]['Million'] + entry[1].get('total_import')[0]['Million']) / scaleFactor).toFixed(1)}</td>`
        )}
      </tr>
      <tr class="govuk-table__row">
        <th scope="row" class="govuk-table__header">Exports</th>
        ${Array.from(dataByYearAndFlow.entries()).map((entry) =>
          htl.html`<td class="govuk-table__cell govuk-table__cell--numeric">${((entry[1].get('total_export')[0]['Million']) / scaleFactor).toFixed(1)}</td>`
        )}
      </tr>
      <tr class="govuk-table__row">
        <th scope="row" class="govuk-table__header">Imports</th>
        ${Array.from(dataByYearAndFlow.entries()).map((entry) =>
          htl.html`<td class="govuk-table__cell govuk-table__cell--numeric">${((entry[1].get('total_import')[0]['Million']) / scaleFactor).toFixed(1)}</td>`
        )}
      </tr>
      <tr class="govuk-table__row">
        <th scope="row" class="govuk-table__header">Trade balance</th>
        ${Array.from(dataByYearAndFlow.entries()).map((entry) =>
          htl.html`<td class="govuk-table__cell govuk-table__cell--numeric">${((entry[1].get('total_export')[0]['Million'] - entry[1].get('total_import')[0]['Million']) / scaleFactor).toFixed(1)}</td>`
        )}
      </tr>
    </tbody>
  </table>
  `
}
```

<!-- HTML combining all the above -->
<div class="govuk-width-container">
  <nav class="govuk-breadcrumbs" aria-label="Breadcrumb">
  <ol class="govuk-breadcrumbs__list">
    <li class="govuk-breadcrumbs__list-item">
      <a class="govuk-breadcrumbs__link" href="../">Home</a>
    </li>
    <li class="govuk-breadcrumbs__list-item">
      <a class="govuk-breadcrumbs__link" href="/partners/{{ country.Display }}">{{ country.Display }}</a>
    </li>
  </ol>
  </nav>
  <div class="govuk-main-wrapper">
  <span class="govuk-caption-l">Trade and investment factsheets</span>
  <h1 class="govuk-heading-l">{{ country.Display }}</h1>
  <div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
      <p class="govuk-body-l govuk-!-margin-bottom-0">Snapshot of the latest statistics on trade and investment between the UK and {{ country.Display }}.</p>
    </div>
  </div>
  <hr class="govuk-section-break govuk-section-break--m govuk-section-break--visible">
  <div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
      <div class="govuk-grid-row">
        <div class="govuk-grid-column-one-third">
          <p class="govuk-body-s">
            <strong>Release date:</strong><br>
            20 December 2024
          </p>
        </div>
        <div class="govuk-grid-column-one-third">
          <p class="govuk-body-s">
            <strong>Next planned release:</strong><br>
            31 January 2025
          </p>
        </div>
      </div>
    </div>
  </div>
  <h2 class="govuk-heading-m govuk-!-margin-top-2">Trade with {{ country.Display }}, in current prices (ONS)</h1>
  <div class="taif-card">
    <h3 class="govuk-heading-s">UK trade with {{ country.Display }}</h2>
    <div class="govuk-tabs govuk-!-margin-bottom-0" data-module="govuk-tabs">
      <h4 class="govuk-tabs__title">
        Contents
      </h4>
      <ul class="govuk-tabs__list">
        <li class="govuk-tabs__list-item govuk-tabs__list-item--selected">
          <a class="govuk-tabs__tab" href="#chart">
            Chart
          </a>
        </li>
        <li class="govuk-tabs__list-item">
          <a class="govuk-tabs__tab" href="#tabular-data">
            Tabular data
          </a>
        </li>
      </ul>
      <div class="govuk-tabs__panel" id="chart">
        <div class="govuk-grid-row">
          <div class="govuk-grid-column-one-half">
            <h5><span class="govuk-heading-s">Trade value</span></h5>
            ${tradeValue(partnerTotals, scaleName, scaleFactor)}
          </div>
          <div class="govuk-grid-column-one-half">
            <h5><span class="govuk-heading-s">Trade balance</span></h5>
            ${tradeBalance(partnerTotals, scaleName, scaleFactor)}
          </div>
        </div>
      </div>
      <div class="govuk-tabs__panel govuk-tabs__panel--hidden" id="tabular-data">
        ${table(partnerTotals, scaleName, scaleFactor)}
      </div>
    </div>
  </div>
<!-- Closes .govuk-width-container and .govuk-main-wrapper -->
</div></div>
